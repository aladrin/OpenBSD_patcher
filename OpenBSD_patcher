#!/bin/ksh
#########################################
# TL;DR - A script for patching OpenBSD #
#########################################
SCRIPT=${0##*/}
RCFILE=~/.${SCRIPT}.rc
[ -f $RCFILE ] && . $RCFILE || { echo ${SCRIPT}: $RCFILE missing; exit 1; }
LOGFILE=/var/log/$SCRIPT.log
ERRFILE=/var/log/$SCRIPT.err
DATE=$(date +%Y%m%d%S)
DATE_HUMAN=$(date)
BUILD_SCRIPT=/usr/src/$SCRIPT.build
INSTALL_SCRIPT=/usr/src/$SCRIPT.install
XINSTALL_SCRIPT=/usr/src/$SCRIPT.xinstall
REV=$(uname -r)
VER=$(IFS=.;for i in $REV; do echo -n $i;done;unset IFS)
DISTURL=https://$DISTHOST/pub/OpenBSD/$REV
PATCHLIST=/usr/src/patches.list
PATCHURL=http://ftp.openbsd.org/pub/OpenBSD/patches/${REV}.tar.gz
STAGE_DIR=/misc/$(uname -r).$(uname -m)

#####################
# Get source code.  #
# Verify signature. #
#####################
f_getsrc() {
	local VER=$1;shift
	for ARCHIVE in $@; do
		echo $ARCHIVE|fgrep -q / && DIR="$(echo $ARCHIVE|awk -F/ '{print $1}')" || DIR=""
		cd /usr/$DIR
		#ftp $DISTURL/${ARCHIVE##*/}.tar.gz || exit 1
                echo Fetching $DISTURL/${ARCHIVE##*/}.tar.gz
                ssh $STAGE_HOST curl $DISTURL/${ARCHIVE##*/}.tar.gz -o $STAGE_DIR/${ARCHIVE}.tar.gz
		[ -f /usr/src/SHA256.sig ] || ( cd /usr/src;ftp $DISTURL/SHA256.sig )
		signify -C -p /etc/signify/openbsd-$VER-base.pub -x /usr/src/SHA256.sig ${ARCHIVE##*/}.tar.gz || exit 1
                echo Extracting ${ARCHIVE##*/}.tar.gz
		ssh $STAGE_HOST tar xzf $STAGE_DIR/${ARCHIVE}.tar.gz -C $STAGE_DIR/$DIR
		rm /usr/${ARCHIVE}.tar.gz
		cd
	done
}

###########################################################
# Generate a script for patching and rebuilding /usr/src. #
# Edit it. Run it. Send an email summary.                 #
###########################################################
f_patch_build() {
	[ -f /usr/src/SHA256.sig ] || { rm -rf /usr/src/* /usr/xenocara/* /usr/obj/* /usr/xobj/*; f_getsrc $VER src/src src/sys xenocara/xenocara; }
	cd /usr/src
	touch $PATCHLIST

	#######################################################################################
	# Grab the latest patches tar ball in base64 format for usability within this script. #
	#######################################################################################
	B64="$(ftp -V -o - $PATCHURL | openssl enc -base64)"
	PATCHES="$(echo "$B64" | openssl enc -base64 -d | tar tzf - | fgrep .sig | sort -n)"

	###########################################################
	# If there are any new patches, extract them in /usr/src. #
	###########################################################
	[ "$PATCHES" = "$(< $PATCHLIST)" ] || {
		NEW_PATCHES="$(echo "$PATCHES" | fgrep -vx -f $PATCHLIST)"
		[ "$(echo $NEW_PATCHES)" = "" ] && { echo Blank update; exit 1; }
		echo "$B64" | openssl enc -base64 -d | pax -r -z -s '/.*\///p' $NEW_PATCHES 2>/dev/null

		###############################################################################################
		# Extract patch and build commands from the comments in the *.sig patch files, then run them. #
		###############################################################################################
		PATCH_BUILD_INSTALL=$(cat <<-EOF
			cd /usr/src
			$(awk 'sub(/^Apply by doing:/,""){f=1} /^And then/{f=0}f' *.patch.sig)
			$(for PATCH in *.patch.sig; do
				BUILDCMDS="$(awk '/^And then/{f=1;next}/^Index:/{f=0}f' $PATCH|sed -e 's/^ *//' -e 's/ *$//')"
				TAG=$(echo "$BUILDCMDS" | gzip -c | openssl enc -base64)
				echo "$TAGS" | fgrep -q "$TAG" || {
					TAGS=$(echo "$TAGS$TAG")
					echo "$BUILDCMDS"
				}
			done)
		EOF
		)

		####################
		# Patch and build. #
		# Log everything.  #
		####################
		echo "# $DATE_HUMAN" >> $LOGFILE
		echo "# $DATE_HUMAN" >> $ERRFILE
		echo "$PATCH_BUILD_INSTALL"|grep -E -v '^make install$' > $BUILD_SCRIPT
		echo "$PATCH_BUILD_INSTALL"|grep -E '^KK=|^cd /|^make install$'|grep -E -v '^cd /usr/xenocara' > $INSTALL_SCRIPT
		echo "$PATCH_BUILD_INSTALL"|grep -E '^cd /usr/xenocara|^make -f Makefile.bsd-wrapper build$'|sed 's/build/install/' > $XINSTALL_SCRIPT
		time . $BUILD_SCRIPT 2>> $ERRFILE 1>> $LOGFILE
		echo "$NEW_PATCHES" >> $PATCHLIST
		cd
	}
}

f_usage() {
	echo "usage: $SCRIPT -p # patch and build"
	echo "       $SCRIPT -i # install (run $INSTALL_SCRIPT)"
	echo "       $SCRIPT -x # install (run $XINSTALL_SCRIPT)"
	exit
}

[ -z "$1" ] && f_usage
while getopts "ipx" opt; do
	case $opt in
		p  ) f_patch_build;;
		i  ) [ -f $INSTALL_SCRIPT ] && . $INSTALL_SCRIPT 2>> $ERRFILE 1>> $LOGFILE ;;
		x  ) [ -f $XINSTALL_SCRIPT ] && . $XINSTALL_SCRIPT 2>> $ERRFILE 1>> $LOGFILE ;;
		\? ) f_usage;;
		:  ) f_usage;;
	esac
done
