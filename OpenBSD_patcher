#!/bin/ksh
#########################################
# TL;DR - A script for patching OpenBSD #
#########################################
SCRIPT=${0##*/}
RCFILE=~/.${SCRIPT}.rc
[ -f $RCFILE ] && . $RCFILE || { echo ${SCRIPT}: $RCFILE missing; exit 1; }
TMPDIR=/tmp
DATE=$(date +%Y%m%d%S)
DATE_HUMAN=$(date)
SCRIPT_DIR=/usr/src/$SCRIPT
SPOOL_DIR=/usr/src/${SCRIPT}_spool
REV=$(uname -r)
VER=$(IFS=.;for i in $REV; do echo -n $i;done;unset IFS)
DISTURL=https://$DISTHOST/pub/OpenBSD/$REV
PATCHLIST=/usr/src/patches.list
PATCHURL=http://ftp.openbsd.org/pub/OpenBSD/patches/${REV}.tar.gz
STAGE_DIR=/misc/$(uname -r).$(uname -m)
[ -z "$WORKERS" ] && WORKERS=$(sysctl hw.ncpu|sed 's/.*=//')

#####################
# Get source code.  #
# Verify signature. #
#####################
f_getsrc() {
  local VER=$1;shift
  for ARCHIVE in $@; do
    echo $ARCHIVE|fgrep -q / && DIR="$(echo $ARCHIVE|awk -F/ '{print $1}')" || DIR=""
    mkdir -p /usr/$DIR
    cd /usr/$DIR
                echo Fetching $DISTURL/${ARCHIVE##*/}.tar.gz
    [ -z "$STAGE_HOST" ] && {
      ftp $DISTURL/${ARCHIVE##*/}.tar.gz || exit 1
    } || {
                  ssh $STAGE_HOST curl $DISTURL/${ARCHIVE##*/}.tar.gz -o $STAGE_DIR/${ARCHIVE}.tar.gz
    }
    [ -f /usr/src/SHA256.sig ] || ( cd /usr/src;ftp $DISTURL/SHA256.sig )
    signify -C -p /etc/signify/openbsd-$VER-base.pub -x /usr/src/SHA256.sig ${ARCHIVE##*/}.tar.gz || exit 1
                echo Extracting ${ARCHIVE##*/}.tar.gz
    [ -z "$STAGE_HOST" ] && {
      tar xzf ${ARCHIVE##*/}.tar.gz
    } || {
      ssh $STAGE_HOST tar xzf $STAGE_DIR/${ARCHIVE}.tar.gz -C $STAGE_DIR/$DIR
    }
    rm /usr/${ARCHIVE}.tar.gz
    cd
  done
}

###########################################################
# Generate a script for patching and rebuilding /usr/src. #
# Edit it. Run it. Send an email summary.                 #
###########################################################
f_patch() {
  [ -f /usr/src/SHA256.sig ] || { rm -rf /usr/src/* /usr/xenocara/* /usr/obj/* /usr/xobj/*; f_getsrc $VER src/src src/sys xenocara/xenocara; }
  cd /usr/src
  touch $PATCHLIST

  #######################################################################################
  # Grab the latest patches tar ball in base64 format for usability within this script. #
  #######################################################################################
  B64="$(ftp -V -o - $PATCHURL | openssl enc -base64)"
  PATCHES="$(echo "$B64" | openssl enc -base64 -d | tar tzf - | fgrep .sig | sort -n)"

  ###########################################################
  # If there are any new patches, extract them in /usr/src. #
  ###########################################################
  [ "$PATCHES" = "$(< $PATCHLIST)" ] || {
    NEW_PATCHES="$(echo "$PATCHES" | fgrep -vx -f $PATCHLIST)"
    [ "$(echo $NEW_PATCHES)" = "" ] && { echo Blank update; exit 1; }
    echo "$B64" | openssl enc -base64 -d | pax -r -z -s '/.*\///p' $NEW_PATCHES 2>/dev/null

    ################################################################################
    # Extract patch and build commands from the comments in the *.sig patch files. #
    ################################################################################
    mkdir -p $SCRIPT_DIR $SPOOL_DIR
    for PATCH in *.patch.sig; do
      awk 'sub(/^Apply by doing:/,""){f=1} /^And then/{f=0}f' $PATCH > $SCRIPT_DIR/${PATCH%%.*}.patch
      S=$(awk '/^And then/{f=1;next}/^Index:/{f=0}f' $PATCH|\
                          sed -e 's/^ *//' -e 's/ *$//')
      BUILD=$(echo "$S"|grep -E -v '^make install$|^cd /usr/xenocara|^make -f Makefile.bsd-wrapper')
      [ $(echo $BUILD | wc -c) -le 1 ] || echo "$BUILD" > $SCRIPT_DIR/${PATCH%%.*}.build
      INSTALL=$(echo "$S"|grep -E '^KK=|^cd /|^make install$'|grep -E -v '^cd /usr/xenocara')
      [ $(echo $INSTALL | wc -c) -le 1 ] || echo "$INSTALL" > $SCRIPT_DIR/${PATCH%%.*}.install
      XBUILD=$(echo "$S"|grep -E '^cd /usr/xenocara|^make -f Makefile.bsd-wrapper')
      [ $(echo $XBUILD | wc -c) -le 1 ] || echo "$XBUILD" > $SCRIPT_DIR/${PATCH%%.*}.xbuild
      XINSTALL=$(echo "$S"|grep -E '^cd /usr/xenocara|^make -f Makefile.bsd-wrapper build$')
      [ $(echo $XINSTALL | wc -c) -le 1 ] || echo "$XINSTALL" > $SCRIPT_DIR/${PATCH%%.*}.xinstall
    done
    for PATCH in $SCRIPT_DIR/*.patch; do
      . $PATCH | logger -p local0.notice -t $SCRIPT
    done
    rm $SCRIPT_DIR/*.patch
    cd
  }
}

f_workers() {
  for i in $SCRIPT_DIR/*.$1; do
    HASH=$(cat $i|md5)
    [ ! -f $SPOOL_DIR/$HASH.$1 ] && cp $i $SPOOL_DIR/$HASH.$1
  done
  for i in $(seq 1 $WORKERS); do
    JOBDIR=$TMPDIR/$i
    mkdir -p $JOBDIR
    {
      while j=$(mv -v $(find $SPOOL_DIR -type f -name "*.$1"|head -1) $JOBDIR 2>/dev/null); do
        JOB=${j##*/}
	. $JOBDIR/$JOB | logger -p local0.notice -t "$SCRIPT ($i)"
        rm $JOBDIR/$JOB
      done
    } &
    sleep 1
  done
  wait
}

f_usage() {
  echo "usage: $SCRIPT -p # patch"
  echo "       $SCRIPT -b # build"
  echo "       $SCRIPT -i # install"
  echo "       $SCRIPT -x # xbuild"
  echo "       $SCRIPT -X # xinstall"
  exit
}

[ -z "$1" ] && f_usage
while getopts "pbixX" opt; do
  case $opt in
    p  ) f_patch;;
    b  ) f_workers build;;
    i  ) f_workers install;;
    x  ) f_workers xbuild;;
    X  ) f_workers xinstall;;
    \? ) f_usage;;
    :  ) f_usage;;
  esac
done
